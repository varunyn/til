{"pageProps":{"title":"Using Ghost mcp in Cursor","date":"2025-06-10T00:00:00.000Z","desc":null,"tags":["ghost","ðŸŒ¿"],"readingTime":{"text":"2 min read","minutes":1.01,"time":60600,"words":202},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h4: \"h4\",\n    a: \"a\",\n    span: \"span\",\n    ol: \"ol\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Today, while scrolling through X (formerly Twitter), I came across a post about MCP (Model Control Panel). In the replies, someone casually mentioned GhostMCP, and I thoughtâ€”wait, whatâ€™s that?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Curious, I did a quick Google search and found the GhostMCP GitHub repository. It turns out, GhostMCP is an open-source Model Control Panel designed to run locally, giving you a minimal UI to interact with different LLMs in a streamlined way.\"\n    }), \"\\n\", _jsxs(_components.h4, {\n      id: \"quick-install-on-cursor\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#quick-install-on-cursor\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Quick Install on Cursor\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"I tested it out quickly using Cursor (the AI-powered code editor), and it worked surprisingly well! However, I noticed the README in the GitHub repo doesn't provide local setup instructions specifically for Cursor users, so I thought Iâ€™d share the exact steps I followed to get it up and running.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Steps to Set Up GhostMCP Locally with Cursor\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"First, clone or download the project from GitHub:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"code-highlight\",\n        children: [_jsx(_components.span, {\n          className: \"code-line\",\n          children: \"git clone https://github.com/MFYDev/ghost-mcp.git\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"cd ghost-mcp\\n\"\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Install dependencies:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"code-highlight\",\n        children: _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"npm install\\n\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"3\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"In Cursor, open your MCP settings and modify the relevant section to point to the GhostMCP server script. Update the configuration like this:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-json\",\n      children: _jsxs(_components.code, {\n        className: \"language-json code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"command\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"node\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"args\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"path-to/ghost-mcp-main/build/server.js\\\"\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"```\\n\"]\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"Make sure to replace path-to with the actual path to your local ghost-mcp directory.\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"\\n\"\n        })]\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"tweetIDs":[],"slug":"ghost-mcp","tweets":null},"__N_SSG":true}